
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c2  00800100  0000034e  000003e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000034e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  008001c2  008001c2  000004a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a78  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b7  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000447  00000000  00000000  000017ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  00001bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042b  00000000  00000000  00001d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000299  00000000  00000000  0000215b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000023f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 10 01 	jmp	0x220	; 0x220 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e4       	ldi	r30, 0x4E	; 78
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 3c       	cpi	r26, 0xC2	; 194
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 ec       	ldi	r26, 0xC2	; 194
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 3c       	cpi	r26, 0xC6	; 198
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <main>
  9e:	0c 94 a5 01 	jmp	0x34a	; 0x34a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUART>:
	sei();
}

void initUART(){
	// Paso 1: estableceer PD1 (TX) como salida y PD0 como entrada (RX)
	DDRD |= (1 << DDD1);
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << DDD0);
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	81 60       	ori	r24, 0x01	; 1
  b0:	8a b9       	out	0x0a, r24	; 10
	
	// Paso 2: Configurar UCSR0A
	UCSR0A = 0;
  b2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	// Paso 3: Configurar UCSR0B
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);
  b6:	88 e9       	ldi	r24, 0x98	; 152
  b8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	// Paso 4: Configurar UCSR0C
	// Configurar UART como asincrono, sin polaridad, 1 stop bit y 8 bits de datos
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  bc:	86 e0       	ldi	r24, 0x06	; 6
  be:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	// Paso 5: Congiurar baudrate UBR0 = 103 -> 9600 @ 16 MHz
	UBRR0 = 103;
  c2:	87 e6       	ldi	r24, 0x67	; 103
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  ce:	08 95       	ret

000000d0 <initADC>:
}

void initADC(){
	ADMUX = 0; // LIMPIAR EL REGISTRO ADMUX
  d0:	ec e7       	ldi	r30, 0x7C	; 124
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0); // REFERENCIA = AVCC
  d6:	80 81       	ld	r24, Z
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR); // JUSTIFICACION A LA IZQUIERDA
  dc:	80 81       	ld	r24, Z
  de:	80 62       	ori	r24, 0x20	; 32
  e0:	80 83       	st	Z, r24
	ADMUX |= (1 << MUX0) | (1 << MUX1) | (1 << MUX2);
  e2:	80 81       	ld	r24, Z
  e4:	87 60       	ori	r24, 0x07	; 7
  e6:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  e8:	ea e7       	ldi	r30, 0x7A	; 122
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADPS1) | (1 << ADPS0); // PRESCALER DE 8
  ee:	80 81       	ld	r24, Z
  f0:	83 60       	ori	r24, 0x03	; 3
  f2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN) | (1 << ADIE); // HABILITAR INTERRUPCIONES
  f4:	80 81       	ld	r24, Z
  f6:	88 68       	ori	r24, 0x88	; 136
  f8:	80 83       	st	Z, r24
	
	ADCSRA |= (1 << ADSC); // EMPIEZA A HACER LA CONVERSION DEL PIN
  fa:	80 81       	ld	r24, Z
  fc:	80 64       	ori	r24, 0x40	; 64
  fe:	80 83       	st	Z, r24
 100:	08 95       	ret

00000102 <setup>:



// Funciones
void setup(){
	cli();
 102:	f8 94       	cli
	initUART();
 104:	0e 94 53 00 	call	0xa6	; 0xa6 <initUART>
	initADC();
 108:	0e 94 68 00 	call	0xd0	; 0xd0 <initADC>
	DDRB = 0xFF;
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;
 110:	15 b8       	out	0x05, r1	; 5
	
	DDRC = 0X0F;
 112:	8f e0       	ldi	r24, 0x0F	; 15
 114:	87 b9       	out	0x07, r24	; 7
	DDRC &= ~(1<< DDC6);   // PC7 como entrada
 116:	87 b1       	in	r24, 0x07	; 7
 118:	8f 7b       	andi	r24, 0xBF	; 191
 11a:	87 b9       	out	0x07, r24	; 7
	PORTC = 0;
 11c:	18 b8       	out	0x08, r1	; 8
	
	opcion = 0;
 11e:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <__data_end>
	flag = 0;
 122:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <flag>
	modo = 0;
 126:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <modo>
	
	CLKPR |= (1 << CLKPCE) | (1 << CLKPS2); // PRESCALER PRINCIPLAR EN 16, 1MHZ
 12a:	e1 e6       	ldi	r30, 0x61	; 97
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	84 68       	ori	r24, 0x84	; 132
 132:	80 83       	st	Z, r24
	
	sei();
 134:	78 94       	sei
 136:	08 95       	ret

00000138 <writeChar>:
	itoa(number, buffer, 10); // Convierte número a string en base 10
	writeString(buffer);
}

void writeChar(char caracter){
	while(( UCSR0A & (1 << UDRE0)) == 0){
 138:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 13c:	95 ff       	sbrs	r25, 5
 13e:	fc cf       	rjmp	.-8      	; 0x138 <writeChar>
	}
	UDR0 = caracter;
 140:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 144:	08 95       	ret

00000146 <writeString>:
}

void writeString(char* texto){
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	8c 01       	movw	r16, r24
	for(uint8_t i = 0; *(texto+i) != '\0' ; i++){
 14e:	c0 e0       	ldi	r28, 0x00	; 0
 150:	03 c0       	rjmp	.+6      	; 0x158 <writeString+0x12>
		writeChar(*(texto+i));
 152:	0e 94 9c 00 	call	0x138	; 0x138 <writeChar>
	}
	UDR0 = caracter;
}

void writeString(char* texto){
	for(uint8_t i = 0; *(texto+i) != '\0' ; i++){
 156:	cf 5f       	subi	r28, 0xFF	; 255
 158:	f8 01       	movw	r30, r16
 15a:	ec 0f       	add	r30, r28
 15c:	f1 1d       	adc	r31, r1
 15e:	80 81       	ld	r24, Z
 160:	81 11       	cpse	r24, r1
 162:	f7 cf       	rjmp	.-18     	; 0x152 <writeString+0xc>
		writeChar(*(texto+i));
	}
}
 164:	cf 91       	pop	r28
 166:	1f 91       	pop	r17
 168:	0f 91       	pop	r16
 16a:	08 95       	ret

0000016c <writeNumber8>:
	
	ADCSRA |= (1 << ADSC); // EMPIEZA A HACER LA CONVERSION DEL PIN
	
}

void writeNumber8(uint8_t number){
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	00 d0       	rcall	.+0      	; 0x172 <writeNumber8+0x6>
 172:	00 d0       	rcall	.+0      	; 0x174 <writeNumber8+0x8>
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 178:	4a e0       	ldi	r20, 0x0A	; 10
 17a:	be 01       	movw	r22, r28
 17c:	6f 5f       	subi	r22, 0xFF	; 255
 17e:	7f 4f       	sbci	r23, 0xFF	; 255
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 70 01 	call	0x2e0	; 0x2e0 <__itoa_ncheck>
	char buffer[4]; // Máx: "255\0"
	itoa(number, buffer, 10); // Convierte número a string en base 10
	writeString(buffer);
 186:	ce 01       	movw	r24, r28
 188:	01 96       	adiw	r24, 0x01	; 1
 18a:	0e 94 a3 00 	call	0x146	; 0x146 <writeString>
}
 18e:	0f 90       	pop	r0
 190:	0f 90       	pop	r0
 192:	0f 90       	pop	r0
 194:	0f 90       	pop	r0
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <menu>:
		writeChar(*(texto+i));
	}
}

void menu(){
	writeString("Seleccione una de las dos opciones \n");
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	0e 94 a3 00 	call	0x146	; 0x146 <writeString>
	writeString("Leer potenciometro (1) \n");
 1a4:	85 e2       	ldi	r24, 0x25	; 37
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	0e 94 a3 00 	call	0x146	; 0x146 <writeString>
	writeString("Enviar ASCI (2)\n");
 1ac:	8e e3       	ldi	r24, 0x3E	; 62
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	0e 94 a3 00 	call	0x146	; 0x146 <writeString>
 1b4:	08 95       	ret

000001b6 <main>:
uint8_t modo;
uint8_t adc_value;

int main(void)
{
	setup();
 1b6:	0e 94 81 00 	call	0x102	; 0x102 <setup>
	menu();
 1ba:	0e 94 ce 00 	call	0x19c	; 0x19c <menu>
	
	while (1)
	{
		if (flag) {
 1be:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <flag>
 1c2:	88 23       	and	r24, r24
 1c4:	e1 f3       	breq	.-8      	; 0x1be <main+0x8>
			switch(opcion) {
 1c6:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <__data_end>
 1ca:	81 33       	cpi	r24, 0x31	; 49
 1cc:	19 f0       	breq	.+6      	; 0x1d4 <main+0x1e>
 1ce:	82 33       	cpi	r24, 0x32	; 50
 1d0:	91 f0       	breq	.+36     	; 0x1f6 <main+0x40>
 1d2:	19 c0       	rjmp	.+50     	; 0x206 <main+0x50>
				case '1':
				writeString("Leyendo potenciometro...\n");
 1d4:	8f e4       	ldi	r24, 0x4F	; 79
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	0e 94 a3 00 	call	0x146	; 0x146 <writeString>
				writeNumber8(adc_value);
 1dc:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <adc_value>
 1e0:	0e 94 b6 00 	call	0x16c	; 0x16c <writeNumber8>
				writeString("\n\n");
 1e4:	89 e6       	ldi	r24, 0x69	; 105
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	0e 94 a3 00 	call	0x146	; 0x146 <writeString>
				menu();
 1ec:	0e 94 ce 00 	call	0x19c	; 0x19c <menu>
				modo = 0;
 1f0:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <modo>
				break;
 1f4:	10 c0       	rjmp	.+32     	; 0x216 <main+0x60>

				case '2':
				writeString("Ingrese su caracter ASCII: \n");
 1f6:	8c e6       	ldi	r24, 0x6C	; 108
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	0e 94 a3 00 	call	0x146	; 0x146 <writeString>
				// No mostrar menú aquí. Cambiamos el modo:
				modo = 1;
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <modo>
				break;
 204:	08 c0       	rjmp	.+16     	; 0x216 <main+0x60>

				default:
				writeString("Opción no válida. Intente de nuevo.\n");
 206:	89 e8       	ldi	r24, 0x89	; 137
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	0e 94 a3 00 	call	0x146	; 0x146 <writeString>
				menu();
 20e:	0e 94 ce 00 	call	0x19c	; 0x19c <menu>
				modo = 0;
 212:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <modo>
				break;
			}
			opcion = 0;
 216:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <__data_end>
			flag = 0;
 21a:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <flag>
 21e:	cf cf       	rjmp	.-98     	; 0x1be <main+0x8>

00000220 <__vector_18>:
	writeString("Seleccione una de las dos opciones \n");
	writeString("Leer potenciometro (1) \n");
	writeString("Enviar ASCI (2)\n");
}

ISR(USART_RX_vect){
 220:	1f 92       	push	r1
 222:	0f 92       	push	r0
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	0f 92       	push	r0
 228:	11 24       	eor	r1, r1
 22a:	2f 93       	push	r18
 22c:	3f 93       	push	r19
 22e:	4f 93       	push	r20
 230:	5f 93       	push	r21
 232:	6f 93       	push	r22
 234:	7f 93       	push	r23
 236:	8f 93       	push	r24
 238:	9f 93       	push	r25
 23a:	af 93       	push	r26
 23c:	bf 93       	push	r27
 23e:	cf 93       	push	r28
 240:	ef 93       	push	r30
 242:	ff 93       	push	r31
	char recibido = UDR0;
 244:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

	if (modo == 0) {
 248:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <modo>
 24c:	81 11       	cpse	r24, r1
 24e:	06 c0       	rjmp	.+12     	; 0x25c <__vector_18+0x3c>
		opcion = recibido;
 250:	c0 93 c2 01 	sts	0x01C2, r28	; 0x8001c2 <__data_end>
		flag = 1;
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <flag>
 25a:	17 c0       	rjmp	.+46     	; 0x28a <__vector_18+0x6a>
	}
	else if (modo == 1) {
 25c:	81 30       	cpi	r24, 0x01	; 1
 25e:	a9 f4       	brne	.+42     	; 0x28a <__vector_18+0x6a>
		writeString("Caracter recibido: ");
 260:	8e ea       	ldi	r24, 0xAE	; 174
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	0e 94 a3 00 	call	0x146	; 0x146 <writeString>
		writeChar(recibido);
 268:	8c 2f       	mov	r24, r28
 26a:	0e 94 9c 00 	call	0x138	; 0x138 <writeChar>
		PORTB = recibido;
 26e:	c5 b9       	out	0x05, r28	; 5
		PORTC = recibido >> 6;
 270:	c2 95       	swap	r28
 272:	c6 95       	lsr	r28
 274:	c6 95       	lsr	r28
 276:	c3 70       	andi	r28, 0x03	; 3
 278:	c8 b9       	out	0x08, r28	; 8
		writeString("\n");
 27a:	8a e6       	ldi	r24, 0x6A	; 106
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	0e 94 a3 00 	call	0x146	; 0x146 <writeString>
		menu();
 282:	0e 94 ce 00 	call	0x19c	; 0x19c <menu>
		modo = 0; // volver al menú
 286:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <modo>
	}
}
 28a:	ff 91       	pop	r31
 28c:	ef 91       	pop	r30
 28e:	cf 91       	pop	r28
 290:	bf 91       	pop	r27
 292:	af 91       	pop	r26
 294:	9f 91       	pop	r25
 296:	8f 91       	pop	r24
 298:	7f 91       	pop	r23
 29a:	6f 91       	pop	r22
 29c:	5f 91       	pop	r21
 29e:	4f 91       	pop	r20
 2a0:	3f 91       	pop	r19
 2a2:	2f 91       	pop	r18
 2a4:	0f 90       	pop	r0
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	0f 90       	pop	r0
 2aa:	1f 90       	pop	r1
 2ac:	18 95       	reti

000002ae <__vector_21>:

ISR(ADC_vect) {
 2ae:	1f 92       	push	r1
 2b0:	0f 92       	push	r0
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	0f 92       	push	r0
 2b6:	11 24       	eor	r1, r1
 2b8:	8f 93       	push	r24
 2ba:	ef 93       	push	r30
 2bc:	ff 93       	push	r31
	adc_value = ADCH;
 2be:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 2c2:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <adc_value>
	ADCSRA |= (1 << ADSC); // Inicia la conversión
 2c6:	ea e7       	ldi	r30, 0x7A	; 122
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	80 64       	ori	r24, 0x40	; 64
 2ce:	80 83       	st	Z, r24
 2d0:	ff 91       	pop	r31
 2d2:	ef 91       	pop	r30
 2d4:	8f 91       	pop	r24
 2d6:	0f 90       	pop	r0
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	0f 90       	pop	r0
 2dc:	1f 90       	pop	r1
 2de:	18 95       	reti

000002e0 <__itoa_ncheck>:
 2e0:	bb 27       	eor	r27, r27
 2e2:	4a 30       	cpi	r20, 0x0A	; 10
 2e4:	31 f4       	brne	.+12     	; 0x2f2 <__itoa_ncheck+0x12>
 2e6:	99 23       	and	r25, r25
 2e8:	22 f4       	brpl	.+8      	; 0x2f2 <__itoa_ncheck+0x12>
 2ea:	bd e2       	ldi	r27, 0x2D	; 45
 2ec:	90 95       	com	r25
 2ee:	81 95       	neg	r24
 2f0:	9f 4f       	sbci	r25, 0xFF	; 255
 2f2:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__utoa_common>

000002f6 <__utoa_ncheck>:
 2f6:	bb 27       	eor	r27, r27

000002f8 <__utoa_common>:
 2f8:	fb 01       	movw	r30, r22
 2fa:	55 27       	eor	r21, r21
 2fc:	aa 27       	eor	r26, r26
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	aa 1f       	adc	r26, r26
 304:	a4 17       	cp	r26, r20
 306:	10 f0       	brcs	.+4      	; 0x30c <__utoa_common+0x14>
 308:	a4 1b       	sub	r26, r20
 30a:	83 95       	inc	r24
 30c:	50 51       	subi	r21, 0x10	; 16
 30e:	b9 f7       	brne	.-18     	; 0x2fe <__utoa_common+0x6>
 310:	a0 5d       	subi	r26, 0xD0	; 208
 312:	aa 33       	cpi	r26, 0x3A	; 58
 314:	08 f0       	brcs	.+2      	; 0x318 <__utoa_common+0x20>
 316:	a9 5d       	subi	r26, 0xD9	; 217
 318:	a1 93       	st	Z+, r26
 31a:	00 97       	sbiw	r24, 0x00	; 0
 31c:	79 f7       	brne	.-34     	; 0x2fc <__utoa_common+0x4>
 31e:	b1 11       	cpse	r27, r1
 320:	b1 93       	st	Z+, r27
 322:	11 92       	st	Z+, r1
 324:	cb 01       	movw	r24, r22
 326:	0c 94 95 01 	jmp	0x32a	; 0x32a <strrev>

0000032a <strrev>:
 32a:	dc 01       	movw	r26, r24
 32c:	fc 01       	movw	r30, r24
 32e:	67 2f       	mov	r22, r23
 330:	71 91       	ld	r23, Z+
 332:	77 23       	and	r23, r23
 334:	e1 f7       	brne	.-8      	; 0x32e <strrev+0x4>
 336:	32 97       	sbiw	r30, 0x02	; 2
 338:	04 c0       	rjmp	.+8      	; 0x342 <strrev+0x18>
 33a:	7c 91       	ld	r23, X
 33c:	6d 93       	st	X+, r22
 33e:	70 83       	st	Z, r23
 340:	62 91       	ld	r22, -Z
 342:	ae 17       	cp	r26, r30
 344:	bf 07       	cpc	r27, r31
 346:	c8 f3       	brcs	.-14     	; 0x33a <strrev+0x10>
 348:	08 95       	ret

0000034a <_exit>:
 34a:	f8 94       	cli

0000034c <__stop_program>:
 34c:	ff cf       	rjmp	.-2      	; 0x34c <__stop_program>
