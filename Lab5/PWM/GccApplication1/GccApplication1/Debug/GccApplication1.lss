
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000286  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000087c  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000721  00000000  00000000  00000c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d3  00000000  00000000  00001371  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00001744  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040a  00000000  00000000  00001824  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000011d  00000000  00000000  00001c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001d4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 76 00 	jmp	0xec	; 0xec <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  88:	0c 94 41 01 	jmp	0x282	; 0x282 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
	
	sei();
}

void initADC(){
	ADMUX = 0; // LIMPIAR EL REGISTRO ADMUX
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0); // REFERENCIA = AVCC
  96:	80 81       	ld	r24, Z
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR); // JUSTIFICACION A LA IZQUIERDA
  9c:	80 81       	ld	r24, Z
  9e:	80 62       	ori	r24, 0x20	; 32
  a0:	80 83       	st	Z, r24
	ADMUX |= (1 << MUX0) | (1 << MUX1) | (1 << MUX2);
  a2:	80 81       	ld	r24, Z
  a4:	87 60       	ori	r24, 0x07	; 7
  a6:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  a8:	ea e7       	ldi	r30, 0x7A	; 122
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADPS1) | (1 << ADPS0); // PRESCALER DE 8
  ae:	80 81       	ld	r24, Z
  b0:	83 60       	ori	r24, 0x03	; 3
  b2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN) | (1 << ADIE); // HABILITAR INTERRUPCIONES
  b4:	80 81       	ld	r24, Z
  b6:	88 68       	ori	r24, 0x88	; 136
  b8:	80 83       	st	Z, r24
	
	ADCSRA |= (1 << ADSC); // EMPIEZA A HACER LA CONVERSION DEL PIN
  ba:	80 81       	ld	r24, Z
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <setup>:
    {
    }
}

void setup(){
	cli();
  c2:	f8 94       	cli
	
	CLKPR = (1 << CLKPCE);
  c4:	e1 e6       	ldi	r30, 0x61	; 97
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 e8       	ldi	r24, 0x80	; 128
  ca:	80 83       	st	Z, r24
	CLKPR = (1 << CLKPS2); // FRECUENCIA DEL CLOCK PRINCIPAL DE 1 MHz
  cc:	84 e0       	ldi	r24, 0x04	; 4
  ce:	80 83       	st	Z, r24
	
	initPWMFastA1(no_invert, 8, 2500);
  d0:	44 ec       	ldi	r20, 0xC4	; 196
  d2:	59 e0       	ldi	r21, 0x09	; 9
  d4:	68 e0       	ldi	r22, 0x08	; 8
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	0e 94 b2 00 	call	0x164	; 0x164 <initPWMFastA1>
	
	initADC();
  de:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	
	sei();
  e2:	78 94       	sei
  e4:	08 95       	ret

000000e6 <main>:
void setup();
void initADC();
uint16_t duty ;
int main(void)
{
	setup();
  e6:	0e 94 61 00 	call	0xc2	; 0xc2 <setup>
  ea:	ff cf       	rjmp	.-2      	; 0xea <main+0x4>

000000ec <__vector_21>:
	
	ADCSRA |= (1 << ADSC); // EMPIEZA A HACER LA CONVERSION DEL PIN
}


ISR(ADC_vect){
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	2f 93       	push	r18
  f8:	3f 93       	push	r19
  fa:	4f 93       	push	r20
  fc:	5f 93       	push	r21
  fe:	6f 93       	push	r22
 100:	7f 93       	push	r23
 102:	8f 93       	push	r24
 104:	9f 93       	push	r25
 106:	af 93       	push	r26
 108:	bf 93       	push	r27
 10a:	ef 93       	push	r30
 10c:	ff 93       	push	r31
	uint32_t adc_value = ADCH;	
 10e:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	duty = 63 + (adc_value*(300-63) /255);
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	ad ee       	ldi	r26, 0xED	; 237
 116:	b0 e0       	ldi	r27, 0x00	; 0
 118:	0e 94 32 01 	call	0x264	; 0x264 <__umulhisi3>
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	40 e0       	ldi	r20, 0x00	; 0
 122:	50 e0       	ldi	r21, 0x00	; 0
 124:	0e 94 10 01 	call	0x220	; 0x220 <__udivmodsi4>
 128:	c9 01       	movw	r24, r18
 12a:	cf 96       	adiw	r24, 0x3f	; 63
 12c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 130:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	updateDutyCycleA1(duty);
 134:	0e 94 0b 01 	call	0x216	; 0x216 <updateDutyCycleA1>
	
	ADCSRA |= (1 << ADSC); // Para que empice a leer otra vez
 138:	ea e7       	ldi	r30, 0x7A	; 122
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	80 64       	ori	r24, 0x40	; 64
 140:	80 83       	st	Z, r24
 142:	ff 91       	pop	r31
 144:	ef 91       	pop	r30
 146:	bf 91       	pop	r27
 148:	af 91       	pop	r26
 14a:	9f 91       	pop	r25
 14c:	8f 91       	pop	r24
 14e:	7f 91       	pop	r23
 150:	6f 91       	pop	r22
 152:	5f 91       	pop	r21
 154:	4f 91       	pop	r20
 156:	3f 91       	pop	r19
 158:	2f 91       	pop	r18
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <initPWMFastA1>:
 */ 

#include "PWM1.h"

void initPWMFastA1(uint8_t invertido, uint16_t prescaler, uint16_t periodo){
	DDRB |= (1 << DDB1);
 164:	94 b1       	in	r25, 0x04	; 4
 166:	92 60       	ori	r25, 0x02	; 2
 168:	94 b9       	out	0x04, r25	; 4
	ICR1 = periodo;
 16a:	50 93 87 00 	sts	0x0087, r21	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 16e:	40 93 86 00 	sts	0x0086, r20	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	TCCR1A &= ~((1 << COM1A1) | (1 << COM1A0));
 172:	e0 e8       	ldi	r30, 0x80	; 128
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	90 81       	ld	r25, Z
 178:	9f 73       	andi	r25, 0x3F	; 63
 17a:	90 83       	st	Z, r25
	
	if (invertido){
 17c:	88 23       	and	r24, r24
 17e:	21 f0       	breq	.+8      	; 0x188 <initPWMFastA1+0x24>
		TCCR1A |= (1 << COM1A1) | (1 << COM1A0);
 180:	80 81       	ld	r24, Z
 182:	80 6c       	ori	r24, 0xC0	; 192
 184:	80 83       	st	Z, r24
 186:	05 c0       	rjmp	.+10     	; 0x192 <initPWMFastA1+0x2e>
		}else{
		TCCR1A |= (1 << COM1A1);
 188:	e0 e8       	ldi	r30, 0x80	; 128
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	80 68       	ori	r24, 0x80	; 128
 190:	80 83       	st	Z, r24
	}
	
	TCCR1A |= (1 << WGM11); // MODO FAST PWM
 192:	e0 e8       	ldi	r30, 0x80	; 128
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	82 60       	ori	r24, 0x02	; 2
 19a:	80 83       	st	Z, r24
	TCCR1B = 0;
 19c:	e1 e8       	ldi	r30, 0x81	; 129
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	10 82       	st	Z, r1
	TCCR1B |= (1 << WGM13) | (1 << WGM12);
 1a2:	80 81       	ld	r24, Z
 1a4:	88 61       	ori	r24, 0x18	; 24
 1a6:	80 83       	st	Z, r24
	
	switch(prescaler){
 1a8:	60 34       	cpi	r22, 0x40	; 64
 1aa:	71 05       	cpc	r23, r1
 1ac:	e1 f0       	breq	.+56     	; 0x1e6 <initPWMFastA1+0x82>
 1ae:	38 f4       	brcc	.+14     	; 0x1be <initPWMFastA1+0x5a>
 1b0:	61 30       	cpi	r22, 0x01	; 1
 1b2:	71 05       	cpc	r23, r1
 1b4:	61 f0       	breq	.+24     	; 0x1ce <initPWMFastA1+0x6a>
 1b6:	68 30       	cpi	r22, 0x08	; 8
 1b8:	71 05       	cpc	r23, r1
 1ba:	79 f0       	breq	.+30     	; 0x1da <initPWMFastA1+0x76>
 1bc:	26 c0       	rjmp	.+76     	; 0x20a <initPWMFastA1+0xa6>
 1be:	61 15       	cp	r22, r1
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	78 07       	cpc	r23, r24
 1c4:	b1 f0       	breq	.+44     	; 0x1f2 <initPWMFastA1+0x8e>
 1c6:	61 15       	cp	r22, r1
 1c8:	74 40       	sbci	r23, 0x04	; 4
 1ca:	c9 f0       	breq	.+50     	; 0x1fe <initPWMFastA1+0x9a>
 1cc:	1e c0       	rjmp	.+60     	; 0x20a <initPWMFastA1+0xa6>
		case 1:
		TCCR1B |= (1 << CS10);
 1ce:	e1 e8       	ldi	r30, 0x81	; 129
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	81 60       	ori	r24, 0x01	; 1
 1d6:	80 83       	st	Z, r24
		break;
 1d8:	08 95       	ret
		case 8:
		TCCR1B |= (1 << CS11);
 1da:	e1 e8       	ldi	r30, 0x81	; 129
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	82 60       	ori	r24, 0x02	; 2
 1e2:	80 83       	st	Z, r24
		break;
 1e4:	08 95       	ret
		case 64:
		TCCR1B |= (1 << CS11) | (1 << CS10);
 1e6:	e1 e8       	ldi	r30, 0x81	; 129
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	83 60       	ori	r24, 0x03	; 3
 1ee:	80 83       	st	Z, r24
		break;
 1f0:	08 95       	ret
		case 256:
		TCCR1B |= (1 << CS12);
 1f2:	e1 e8       	ldi	r30, 0x81	; 129
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	84 60       	ori	r24, 0x04	; 4
 1fa:	80 83       	st	Z, r24
		break;
 1fc:	08 95       	ret
		case 1024:
		TCCR1B |= (1 << CS12) | (1 << CS10);
 1fe:	e1 e8       	ldi	r30, 0x81	; 129
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	85 60       	ori	r24, 0x05	; 5
 206:	80 83       	st	Z, r24
		break;
 208:	08 95       	ret
		default:
		TCCR1B |= (1 << CS10);
 20a:	e1 e8       	ldi	r30, 0x81	; 129
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	81 60       	ori	r24, 0x01	; 1
 212:	80 83       	st	Z, r24
 214:	08 95       	ret

00000216 <updateDutyCycleA1>:
		break;
	}
}

void updateDutyCycleA1(uint16_t dutycycle){
	OCR1A = dutycycle;
 216:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 21a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 21e:	08 95       	ret

00000220 <__udivmodsi4>:
 220:	a1 e2       	ldi	r26, 0x21	; 33
 222:	1a 2e       	mov	r1, r26
 224:	aa 1b       	sub	r26, r26
 226:	bb 1b       	sub	r27, r27
 228:	fd 01       	movw	r30, r26
 22a:	0d c0       	rjmp	.+26     	; 0x246 <__udivmodsi4_ep>

0000022c <__udivmodsi4_loop>:
 22c:	aa 1f       	adc	r26, r26
 22e:	bb 1f       	adc	r27, r27
 230:	ee 1f       	adc	r30, r30
 232:	ff 1f       	adc	r31, r31
 234:	a2 17       	cp	r26, r18
 236:	b3 07       	cpc	r27, r19
 238:	e4 07       	cpc	r30, r20
 23a:	f5 07       	cpc	r31, r21
 23c:	20 f0       	brcs	.+8      	; 0x246 <__udivmodsi4_ep>
 23e:	a2 1b       	sub	r26, r18
 240:	b3 0b       	sbc	r27, r19
 242:	e4 0b       	sbc	r30, r20
 244:	f5 0b       	sbc	r31, r21

00000246 <__udivmodsi4_ep>:
 246:	66 1f       	adc	r22, r22
 248:	77 1f       	adc	r23, r23
 24a:	88 1f       	adc	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	1a 94       	dec	r1
 250:	69 f7       	brne	.-38     	; 0x22c <__udivmodsi4_loop>
 252:	60 95       	com	r22
 254:	70 95       	com	r23
 256:	80 95       	com	r24
 258:	90 95       	com	r25
 25a:	9b 01       	movw	r18, r22
 25c:	ac 01       	movw	r20, r24
 25e:	bd 01       	movw	r22, r26
 260:	cf 01       	movw	r24, r30
 262:	08 95       	ret

00000264 <__umulhisi3>:
 264:	a2 9f       	mul	r26, r18
 266:	b0 01       	movw	r22, r0
 268:	b3 9f       	mul	r27, r19
 26a:	c0 01       	movw	r24, r0
 26c:	a3 9f       	mul	r26, r19
 26e:	70 0d       	add	r23, r0
 270:	81 1d       	adc	r24, r1
 272:	11 24       	eor	r1, r1
 274:	91 1d       	adc	r25, r1
 276:	b2 9f       	mul	r27, r18
 278:	70 0d       	add	r23, r0
 27a:	81 1d       	adc	r24, r1
 27c:	11 24       	eor	r1, r1
 27e:	91 1d       	adc	r25, r1
 280:	08 95       	ret

00000282 <_exit>:
 282:	f8 94       	cli

00000284 <__stop_program>:
 284:	ff cf       	rjmp	.-2      	; 0x284 <__stop_program>
