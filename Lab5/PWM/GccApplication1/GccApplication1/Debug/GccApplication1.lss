
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000058a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000516  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  0000058a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000058a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bb0  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008be  00000000  00000000  00001264  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000075d  00000000  00000000  00001b22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00002280  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000544  00000000  00000000  000023e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000036f  00000000  00000000  00002924  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002c93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__vector_9>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 83 00 	call	0x106	; 0x106 <main>
  88:	0c 94 89 02 	jmp	0x512	; 0x512 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
	mux_adc = 0;
	sei();
}

void initADC(){
	ADMUX = 0; // LIMPIAR EL REGISTRO ADMUX
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0); // REFERENCIA = AVCC
  96:	80 81       	ld	r24, Z
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR); // JUSTIFICACION A LA IZQUIERDA
  9c:	80 81       	ld	r24, Z
  9e:	80 62       	ori	r24, 0x20	; 32
  a0:	80 83       	st	Z, r24
	ADMUX |= (1 << MUX0) | (1 << MUX1) | (1 << MUX2); // EMPEZAMOS LEYENDO ADC7
  a2:	80 81       	ld	r24, Z
  a4:	87 60       	ori	r24, 0x07	; 7
  a6:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  a8:	ea e7       	ldi	r30, 0x7A	; 122
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADPS1) | (1 << ADPS0); // PRESCALER DE 8
  ae:	80 81       	ld	r24, Z
  b0:	83 60       	ori	r24, 0x03	; 3
  b2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN) | (1 << ADIE); // HABILITAR INTERRUPCIONES
  b4:	80 81       	ld	r24, Z
  b6:	88 68       	ori	r24, 0x88	; 136
  b8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE); // HABILITAR INTERRUPCIONES
  ba:	80 81       	ld	r24, Z
  bc:	80 62       	ori	r24, 0x20	; 32
  be:	80 83       	st	Z, r24
	
	ADCSRA |= (1 << ADSC); // EMPIEZA A HACER LA CONVERSION DEL PIN
  c0:	80 81       	ld	r24, Z
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	80 83       	st	Z, r24
  c6:	08 95       	ret

000000c8 <setup>:
    {
    }
}

void setup(){
	cli();
  c8:	f8 94       	cli
	
	CLKPR = (1 << CLKPCE);
  ca:	e1 e6       	ldi	r30, 0x61	; 97
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 e8       	ldi	r24, 0x80	; 128
  d0:	80 83       	st	Z, r24
	CLKPR = (1 << CLKPS2); // FRECUENCIA DEL CLOCK PRINCIPAL DE 1 MHz
  d2:	84 e0       	ldi	r24, 0x04	; 4
  d4:	80 83       	st	Z, r24
	
	initADC();
  d6:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	initPWMFastA1(no_invert, 8, 2500); //Los parámetros aqui deben ser iguales, pues se usa el mismo timer
  da:	44 ec       	ldi	r20, 0xC4	; 196
  dc:	59 e0       	ldi	r21, 0x09	; 9
  de:	68 e0       	ldi	r22, 0x08	; 8
  e0:	70 e0       	ldi	r23, 0x00	; 0
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	0e 94 1c 01 	call	0x238	; 0x238 <initPWMFastA1>
	initPWMFastB1(no_invert, 8, 2500); 
  e8:	44 ec       	ldi	r20, 0xC4	; 196
  ea:	59 e0       	ldi	r21, 0x09	; 9
  ec:	68 e0       	ldi	r22, 0x08	; 8
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <initPWMFastB1>
	
	initPWMManualA(1);// Tiene que usar el mismo prescaler
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <initPWMManualA>
 
	
	mux_adc = 0;
  fe:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <mux_adc>
	sei();
 102:	78 94       	sei
 104:	08 95       	ret

00000106 <main>:
 uint8_t duty_cycle_led;


int main(void)
{
	setup();
 106:	0e 94 64 00 	call	0xc8	; 0xc8 <setup>
 10a:	ff cf       	rjmp	.-2      	; 0x10a <main+0x4>

0000010c <__vector_21>:
	
	ADCSRA |= (1 << ADSC); // EMPIEZA A HACER LA CONVERSION DEL PIN
}


ISR(ADC_vect) {
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	2f 93       	push	r18
 118:	3f 93       	push	r19
 11a:	4f 93       	push	r20
 11c:	5f 93       	push	r21
 11e:	6f 93       	push	r22
 120:	7f 93       	push	r23
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
 126:	af 93       	push	r26
 128:	bf 93       	push	r27
 12a:	cf 93       	push	r28
 12c:	ef 93       	push	r30
 12e:	ff 93       	push	r31
	uint8_t adc_value = ADCH;
 130:	c0 91 79 00 	lds	r28, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>

	// Calcular el duty para PWM de servos
	duty = 65 + ((uint32_t)adc_value * (300 - 65) / 255);
 134:	2c 2f       	mov	r18, r28
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	ab ee       	ldi	r26, 0xEB	; 235
 13a:	b0 e0       	ldi	r27, 0x00	; 0
 13c:	0e 94 66 02 	call	0x4cc	; 0x4cc <__umulhisi3>
 140:	2f ef       	ldi	r18, 0xFF	; 255
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	40 e0       	ldi	r20, 0x00	; 0
 146:	50 e0       	ldi	r21, 0x00	; 0
 148:	0e 94 44 02 	call	0x488	; 0x488 <__udivmodsi4>
 14c:	2f 5b       	subi	r18, 0xBF	; 191
 14e:	3f 4f       	sbci	r19, 0xFF	; 255
 150:	30 93 04 01 	sts	0x0104, r19	; 0x800104 <duty+0x1>
 154:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <duty>

	if (mux_adc == 0) {
 158:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <mux_adc>
 15c:	81 11       	cpse	r24, r1
 15e:	0e c0       	rjmp	.+28     	; 0x17c <__vector_21+0x70>
		updateDutyCycleA1(duty);  // ADC7 ? Servo A
 160:	c9 01       	movw	r24, r18
 162:	0e 94 75 01 	call	0x2ea	; 0x2ea <updateDutyCycleA1>
		
		// Próximo: ADC6
		ADMUX = (1 << REFS0) | (1 << ADLAR) | (1 << MUX1) | (1 << MUX2);
 166:	86 e6       	ldi	r24, 0x66	; 102
 168:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
		mux_adc = 1;
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <mux_adc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 172:	25 e3       	ldi	r18, 0x35	; 53
 174:	2a 95       	dec	r18
 176:	f1 f7       	brne	.-4      	; 0x174 <__vector_21+0x68>
 178:	00 00       	nop
 17a:	23 c0       	rjmp	.+70     	; 0x1c2 <__vector_21+0xb6>
		_delay_us(10);

		} else if (mux_adc == 1) {
 17c:	81 30       	cpi	r24, 0x01	; 1
 17e:	71 f4       	brne	.+28     	; 0x19c <__vector_21+0x90>
		updateDutyCycleB1(duty);  // ADC6 ? Servo B
 180:	c9 01       	movw	r24, r18
 182:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <updateDutyCycleB1>

		// Próximo: ADC5 (para PWM manual)
		ADMUX = (1 << REFS0) | (1 << ADLAR) | (1 << MUX0) | (1 << MUX2);
 186:	85 e6       	ldi	r24, 0x65	; 101
 188:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
		mux_adc = 2;
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <mux_adc>
 192:	85 e3       	ldi	r24, 0x35	; 53
 194:	8a 95       	dec	r24
 196:	f1 f7       	brne	.-4      	; 0x194 <__vector_21+0x88>
 198:	00 00       	nop
 19a:	13 c0       	rjmp	.+38     	; 0x1c2 <__vector_21+0xb6>
		_delay_us(10);

		} else {
        duty_cycle_led = (adc_value * 25) / 255;
 19c:	29 e1       	ldi	r18, 0x19	; 25
 19e:	c2 9f       	mul	r28, r18
 1a0:	c0 01       	movw	r24, r0
 1a2:	11 24       	eor	r1, r1
 1a4:	6f ef       	ldi	r22, 0xFF	; 255
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	0e 94 30 02 	call	0x460	; 0x460 <__divmodhi4>
 1ac:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <duty_cycle_led>
		ADMUX = (1 << REFS0) | (1 << ADLAR) | (1 << MUX0) | (1 << MUX1) | (1 << MUX2);
 1b0:	87 e6       	ldi	r24, 0x67	; 103
 1b2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
		mux_adc = 0;
 1b6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <mux_adc>
 1ba:	85 e3       	ldi	r24, 0x35	; 53
 1bc:	8a 95       	dec	r24
 1be:	f1 f7       	brne	.-4      	; 0x1bc <__vector_21+0xb0>
 1c0:	00 00       	nop
		_delay_us(10);
	}

	ADCSRA |= (1 << ADSC); // Iniciar siguiente conversión
 1c2:	ea e7       	ldi	r30, 0x7A	; 122
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	80 64       	ori	r24, 0x40	; 64
 1ca:	80 83       	st	Z, r24
}
 1cc:	ff 91       	pop	r31
 1ce:	ef 91       	pop	r30
 1d0:	cf 91       	pop	r28
 1d2:	bf 91       	pop	r27
 1d4:	af 91       	pop	r26
 1d6:	9f 91       	pop	r25
 1d8:	8f 91       	pop	r24
 1da:	7f 91       	pop	r23
 1dc:	6f 91       	pop	r22
 1de:	5f 91       	pop	r21
 1e0:	4f 91       	pop	r20
 1e2:	3f 91       	pop	r19
 1e4:	2f 91       	pop	r18
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <__vector_9>:


ISR(TIMER2_OVF_vect) {
 1f0:	1f 92       	push	r1
 1f2:	0f 92       	push	r0
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	0f 92       	push	r0
 1f8:	11 24       	eor	r1, r1
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
	counter++;
 1fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 202:	8f 5f       	subi	r24, 0xFF	; 255
 204:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	if (counter < duty_cycle_led) {
 208:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <duty_cycle_led>
 20c:	89 17       	cp	r24, r25
 20e:	20 f4       	brcc	.+8      	; 0x218 <__vector_9+0x28>
		PORTD |= (1 << PORTD2);  // Encender
 210:	8b b1       	in	r24, 0x0b	; 11
 212:	84 60       	ori	r24, 0x04	; 4
 214:	8b b9       	out	0x0b, r24	; 11
 216:	03 c0       	rjmp	.+6      	; 0x21e <__vector_9+0x2e>
		} else {
		PORTD &= ~(1 << PORTD2); // Apagar
 218:	8b b1       	in	r24, 0x0b	; 11
 21a:	8b 7f       	andi	r24, 0xFB	; 251
 21c:	8b b9       	out	0x0b, r24	; 11
	}

	if (counter == 25) {
 21e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 222:	89 31       	cpi	r24, 0x19	; 25
 224:	11 f4       	brne	.+4      	; 0x22a <__vector_9+0x3a>
		counter = 0;
 226:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 22a:	9f 91       	pop	r25
 22c:	8f 91       	pop	r24
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <initPWMFastA1>:
 */ 

#include "PWMA1.h"

void initPWMFastA1(uint8_t invertido, uint16_t prescaler, uint16_t periodo){
	DDRB |= (1 << DDB1);
 238:	94 b1       	in	r25, 0x04	; 4
 23a:	92 60       	ori	r25, 0x02	; 2
 23c:	94 b9       	out	0x04, r25	; 4
	ICR1 = periodo;
 23e:	50 93 87 00 	sts	0x0087, r21	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 242:	40 93 86 00 	sts	0x0086, r20	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	TCCR1A &= ~((1 << COM1A1) | (1 << COM1A0));
 246:	e0 e8       	ldi	r30, 0x80	; 128
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	90 81       	ld	r25, Z
 24c:	9f 73       	andi	r25, 0x3F	; 63
 24e:	90 83       	st	Z, r25
	
	if (invertido){
 250:	88 23       	and	r24, r24
 252:	21 f0       	breq	.+8      	; 0x25c <initPWMFastA1+0x24>
		TCCR1A |= (1 << COM1A1) | (1 << COM1A0);
 254:	80 81       	ld	r24, Z
 256:	80 6c       	ori	r24, 0xC0	; 192
 258:	80 83       	st	Z, r24
 25a:	05 c0       	rjmp	.+10     	; 0x266 <initPWMFastA1+0x2e>
		}else{
		TCCR1A |= (1 << COM1A1);
 25c:	e0 e8       	ldi	r30, 0x80	; 128
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	80 68       	ori	r24, 0x80	; 128
 264:	80 83       	st	Z, r24
	}
	
	TCCR1A |= (1 << WGM11); // MODO FAST PWM
 266:	e0 e8       	ldi	r30, 0x80	; 128
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	82 60       	ori	r24, 0x02	; 2
 26e:	80 83       	st	Z, r24
	TCCR1B = 0;
 270:	e1 e8       	ldi	r30, 0x81	; 129
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	10 82       	st	Z, r1
	TCCR1B |= (1 << WGM13) | (1 << WGM12);
 276:	80 81       	ld	r24, Z
 278:	88 61       	ori	r24, 0x18	; 24
 27a:	80 83       	st	Z, r24
	
	switch(prescaler){
 27c:	60 34       	cpi	r22, 0x40	; 64
 27e:	71 05       	cpc	r23, r1
 280:	e1 f0       	breq	.+56     	; 0x2ba <initPWMFastA1+0x82>
 282:	38 f4       	brcc	.+14     	; 0x292 <initPWMFastA1+0x5a>
 284:	61 30       	cpi	r22, 0x01	; 1
 286:	71 05       	cpc	r23, r1
 288:	61 f0       	breq	.+24     	; 0x2a2 <initPWMFastA1+0x6a>
 28a:	68 30       	cpi	r22, 0x08	; 8
 28c:	71 05       	cpc	r23, r1
 28e:	79 f0       	breq	.+30     	; 0x2ae <initPWMFastA1+0x76>
 290:	26 c0       	rjmp	.+76     	; 0x2de <initPWMFastA1+0xa6>
 292:	61 15       	cp	r22, r1
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	78 07       	cpc	r23, r24
 298:	b1 f0       	breq	.+44     	; 0x2c6 <initPWMFastA1+0x8e>
 29a:	61 15       	cp	r22, r1
 29c:	74 40       	sbci	r23, 0x04	; 4
 29e:	c9 f0       	breq	.+50     	; 0x2d2 <initPWMFastA1+0x9a>
 2a0:	1e c0       	rjmp	.+60     	; 0x2de <initPWMFastA1+0xa6>
		case 1:
		TCCR1B |= (1 << CS10);
 2a2:	e1 e8       	ldi	r30, 0x81	; 129
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	80 81       	ld	r24, Z
 2a8:	81 60       	ori	r24, 0x01	; 1
 2aa:	80 83       	st	Z, r24
		break;
 2ac:	08 95       	ret
		case 8:
		TCCR1B |= (1 << CS11);
 2ae:	e1 e8       	ldi	r30, 0x81	; 129
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 81       	ld	r24, Z
 2b4:	82 60       	ori	r24, 0x02	; 2
 2b6:	80 83       	st	Z, r24
		break;
 2b8:	08 95       	ret
		case 64:
		TCCR1B |= (1 << CS11) | (1 << CS10);
 2ba:	e1 e8       	ldi	r30, 0x81	; 129
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	83 60       	ori	r24, 0x03	; 3
 2c2:	80 83       	st	Z, r24
		break;
 2c4:	08 95       	ret
		case 256:
		TCCR1B |= (1 << CS12);
 2c6:	e1 e8       	ldi	r30, 0x81	; 129
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	84 60       	ori	r24, 0x04	; 4
 2ce:	80 83       	st	Z, r24
		break;
 2d0:	08 95       	ret
		case 1024:
		TCCR1B |= (1 << CS12) | (1 << CS10);
 2d2:	e1 e8       	ldi	r30, 0x81	; 129
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	85 60       	ori	r24, 0x05	; 5
 2da:	80 83       	st	Z, r24
		break;
 2dc:	08 95       	ret
		default:
		TCCR1B |= (1 << CS10);
 2de:	e1 e8       	ldi	r30, 0x81	; 129
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	80 81       	ld	r24, Z
 2e4:	81 60       	ori	r24, 0x01	; 1
 2e6:	80 83       	st	Z, r24
 2e8:	08 95       	ret

000002ea <updateDutyCycleA1>:
		break;
	}
}

void updateDutyCycleA1(uint16_t dutycycle){
	OCR1A = dutycycle;
 2ea:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 2ee:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 2f2:	08 95       	ret

000002f4 <initPWMFastB1>:
 *  Author: admin
 */ 
#include "PWMB1.h"

void initPWMFastB1(uint8_t invertido, uint16_t prescaler, uint16_t periodo){
	DDRB |= (1 << DDB2);
 2f4:	94 b1       	in	r25, 0x04	; 4
 2f6:	94 60       	ori	r25, 0x04	; 4
 2f8:	94 b9       	out	0x04, r25	; 4
	ICR1 = periodo;
 2fa:	50 93 87 00 	sts	0x0087, r21	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 2fe:	40 93 86 00 	sts	0x0086, r20	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	TCCR1A &= ~((1 << COM1B1) | (1 << COM1B0));
 302:	e0 e8       	ldi	r30, 0x80	; 128
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	90 81       	ld	r25, Z
 308:	9f 7c       	andi	r25, 0xCF	; 207
 30a:	90 83       	st	Z, r25
	
	if (invertido){
 30c:	88 23       	and	r24, r24
 30e:	21 f0       	breq	.+8      	; 0x318 <initPWMFastB1+0x24>
		TCCR1A |= (1 << COM1B1) | (1 << COM1B0);
 310:	80 81       	ld	r24, Z
 312:	80 63       	ori	r24, 0x30	; 48
 314:	80 83       	st	Z, r24
 316:	05 c0       	rjmp	.+10     	; 0x322 <initPWMFastB1+0x2e>
		}else{
		TCCR1A |= (1 << COM1B1);
 318:	e0 e8       	ldi	r30, 0x80	; 128
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	80 62       	ori	r24, 0x20	; 32
 320:	80 83       	st	Z, r24
	}
	
	TCCR1A |= (1 << WGM11); // MODO FAST PWM
 322:	e0 e8       	ldi	r30, 0x80	; 128
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	82 60       	ori	r24, 0x02	; 2
 32a:	80 83       	st	Z, r24
	TCCR1B = 0;
 32c:	e1 e8       	ldi	r30, 0x81	; 129
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	10 82       	st	Z, r1
	TCCR1B |= (1 << WGM13) | (1 << WGM12);
 332:	80 81       	ld	r24, Z
 334:	88 61       	ori	r24, 0x18	; 24
 336:	80 83       	st	Z, r24
	
	switch(prescaler){
 338:	60 34       	cpi	r22, 0x40	; 64
 33a:	71 05       	cpc	r23, r1
 33c:	e1 f0       	breq	.+56     	; 0x376 <initPWMFastB1+0x82>
 33e:	38 f4       	brcc	.+14     	; 0x34e <initPWMFastB1+0x5a>
 340:	61 30       	cpi	r22, 0x01	; 1
 342:	71 05       	cpc	r23, r1
 344:	61 f0       	breq	.+24     	; 0x35e <initPWMFastB1+0x6a>
 346:	68 30       	cpi	r22, 0x08	; 8
 348:	71 05       	cpc	r23, r1
 34a:	79 f0       	breq	.+30     	; 0x36a <initPWMFastB1+0x76>
 34c:	26 c0       	rjmp	.+76     	; 0x39a <initPWMFastB1+0xa6>
 34e:	61 15       	cp	r22, r1
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	78 07       	cpc	r23, r24
 354:	b1 f0       	breq	.+44     	; 0x382 <initPWMFastB1+0x8e>
 356:	61 15       	cp	r22, r1
 358:	74 40       	sbci	r23, 0x04	; 4
 35a:	c9 f0       	breq	.+50     	; 0x38e <initPWMFastB1+0x9a>
 35c:	1e c0       	rjmp	.+60     	; 0x39a <initPWMFastB1+0xa6>
		case 1:
		TCCR1B |= (1 << CS10);
 35e:	e1 e8       	ldi	r30, 0x81	; 129
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	80 81       	ld	r24, Z
 364:	81 60       	ori	r24, 0x01	; 1
 366:	80 83       	st	Z, r24
		break;
 368:	08 95       	ret
		case 8:
		TCCR1B |= (1 << CS11);
 36a:	e1 e8       	ldi	r30, 0x81	; 129
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	82 60       	ori	r24, 0x02	; 2
 372:	80 83       	st	Z, r24
		break;
 374:	08 95       	ret
		case 64:
		TCCR1B |= (1 << CS11) | (1 << CS10);
 376:	e1 e8       	ldi	r30, 0x81	; 129
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	80 81       	ld	r24, Z
 37c:	83 60       	ori	r24, 0x03	; 3
 37e:	80 83       	st	Z, r24
		break;
 380:	08 95       	ret
		case 256:
		TCCR1B |= (1 << CS12);
 382:	e1 e8       	ldi	r30, 0x81	; 129
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 81       	ld	r24, Z
 388:	84 60       	ori	r24, 0x04	; 4
 38a:	80 83       	st	Z, r24
		break;
 38c:	08 95       	ret
		case 1024:
		TCCR1B |= (1 << CS12) | (1 << CS10);
 38e:	e1 e8       	ldi	r30, 0x81	; 129
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	80 81       	ld	r24, Z
 394:	85 60       	ori	r24, 0x05	; 5
 396:	80 83       	st	Z, r24
		break;
 398:	08 95       	ret
		default:
		TCCR1B |= (1 << CS10);
 39a:	e1 e8       	ldi	r30, 0x81	; 129
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	80 81       	ld	r24, Z
 3a0:	81 60       	ori	r24, 0x01	; 1
 3a2:	80 83       	st	Z, r24
 3a4:	08 95       	ret

000003a6 <updateDutyCycleB1>:
		break;
	}
}

void updateDutyCycleB1(uint16_t dutycycle){
	OCR1B = dutycycle;
 3a6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 3aa:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 3ae:	08 95       	ret

000003b0 <initPWMManualA>:

#include "PWM_manual.h"

void initPWMManualA(uint16_t prescaler)
{
    DDRD  |= (1 << DDD2);   // PD2 como salida
 3b0:	2a b1       	in	r18, 0x0a	; 10
 3b2:	24 60       	ori	r18, 0x04	; 4
 3b4:	2a b9       	out	0x0a, r18	; 10
    PORTD &= ~(1 << PORTD2);// LED apagado
 3b6:	2b b1       	in	r18, 0x0b	; 11
 3b8:	2b 7f       	andi	r18, 0xFB	; 251
 3ba:	2b b9       	out	0x0b, r18	; 11

    TCCR2A = 0;             // Modo Normal
 3bc:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    TCCR2B = 0;             // Limpia prescaler
 3c0:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>

    switch (prescaler)
 3c4:	80 34       	cpi	r24, 0x40	; 64
 3c6:	91 05       	cpc	r25, r1
 3c8:	41 f1       	breq	.+80     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 3ca:	48 f4       	brcc	.+18     	; 0x3de <initPWMManualA+0x2e>
 3cc:	88 30       	cpi	r24, 0x08	; 8
 3ce:	91 05       	cpc	r25, r1
 3d0:	c1 f0       	breq	.+48     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3d2:	80 32       	cpi	r24, 0x20	; 32
 3d4:	91 05       	cpc	r25, r1
 3d6:	d9 f0       	breq	.+54     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3d8:	01 97       	sbiw	r24, 0x01	; 1
 3da:	b9 f5       	brne	.+110    	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 3dc:	0c c0       	rjmp	.+24     	; 0x3f6 <initPWMManualA+0x46>
 3de:	81 15       	cp	r24, r1
 3e0:	21 e0       	ldi	r18, 0x01	; 1
 3e2:	92 07       	cpc	r25, r18
 3e4:	31 f1       	breq	.+76     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 3e6:	81 15       	cp	r24, r1
 3e8:	24 e0       	ldi	r18, 0x04	; 4
 3ea:	92 07       	cpc	r25, r18
 3ec:	41 f1       	breq	.+80     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 3ee:	80 38       	cpi	r24, 0x80	; 128
 3f0:	91 05       	cpc	r25, r1
 3f2:	59 f5       	brne	.+86     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 3f4:	18 c0       	rjmp	.+48     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
    {
        case 1:    TCCR2B |= (1 << CS20);                                   break; // clk/1
 3f6:	e1 eb       	ldi	r30, 0xB1	; 177
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	80 81       	ld	r24, Z
 3fc:	81 60       	ori	r24, 0x01	; 1
 3fe:	80 83       	st	Z, r24
 400:	29 c0       	rjmp	.+82     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
        case 8:    TCCR2B |= (1 << CS21);                                   break; // clk/8
 402:	e1 eb       	ldi	r30, 0xB1	; 177
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 81       	ld	r24, Z
 408:	82 60       	ori	r24, 0x02	; 2
 40a:	80 83       	st	Z, r24
 40c:	23 c0       	rjmp	.+70     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
        case 32:   TCCR2B |= (1 << CS21) | (1 << CS20);                     break; // clk/32
 40e:	e1 eb       	ldi	r30, 0xB1	; 177
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	80 81       	ld	r24, Z
 414:	83 60       	ori	r24, 0x03	; 3
 416:	80 83       	st	Z, r24
 418:	1d c0       	rjmp	.+58     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
        case 64:   TCCR2B |= (1 << CS22);                                   break; // clk/64
 41a:	e1 eb       	ldi	r30, 0xB1	; 177
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	80 81       	ld	r24, Z
 420:	84 60       	ori	r24, 0x04	; 4
 422:	80 83       	st	Z, r24
 424:	17 c0       	rjmp	.+46     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
        case 128:  TCCR2B |= (1 << CS22) | (1 << CS20);                     break; // clk/128
 426:	e1 eb       	ldi	r30, 0xB1	; 177
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	80 81       	ld	r24, Z
 42c:	85 60       	ori	r24, 0x05	; 5
 42e:	80 83       	st	Z, r24
 430:	11 c0       	rjmp	.+34     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
        case 256:  TCCR2B |= (1 << CS22) | (1 << CS21);                     break; // clk/256
 432:	e1 eb       	ldi	r30, 0xB1	; 177
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	80 81       	ld	r24, Z
 438:	86 60       	ori	r24, 0x06	; 6
 43a:	80 83       	st	Z, r24
 43c:	0b c0       	rjmp	.+22     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
        case 1024: TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);       break; // clk/1024
 43e:	e1 eb       	ldi	r30, 0xB1	; 177
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	80 81       	ld	r24, Z
 444:	87 60       	ori	r24, 0x07	; 7
 446:	80 83       	st	Z, r24
 448:	05 c0       	rjmp	.+10     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
        default:   TCCR2B |= (1 << CS21);                                   break; // clk/8 por defecto
 44a:	e1 eb       	ldi	r30, 0xB1	; 177
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	80 81       	ld	r24, Z
 450:	82 60       	ori	r24, 0x02	; 2
 452:	80 83       	st	Z, r24
    }

    TCNT2  = 0;                                   // Contador a 0
 454:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    TIMSK2 = (1 << TOIE2);        // Habilita OVF y COMPA
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
 45e:	08 95       	ret

00000460 <__divmodhi4>:
 460:	97 fb       	bst	r25, 7
 462:	07 2e       	mov	r0, r23
 464:	16 f4       	brtc	.+4      	; 0x46a <__divmodhi4+0xa>
 466:	00 94       	com	r0
 468:	07 d0       	rcall	.+14     	; 0x478 <__divmodhi4_neg1>
 46a:	77 fd       	sbrc	r23, 7
 46c:	09 d0       	rcall	.+18     	; 0x480 <__divmodhi4_neg2>
 46e:	0e 94 75 02 	call	0x4ea	; 0x4ea <__udivmodhi4>
 472:	07 fc       	sbrc	r0, 7
 474:	05 d0       	rcall	.+10     	; 0x480 <__divmodhi4_neg2>
 476:	3e f4       	brtc	.+14     	; 0x486 <__divmodhi4_exit>

00000478 <__divmodhi4_neg1>:
 478:	90 95       	com	r25
 47a:	81 95       	neg	r24
 47c:	9f 4f       	sbci	r25, 0xFF	; 255
 47e:	08 95       	ret

00000480 <__divmodhi4_neg2>:
 480:	70 95       	com	r23
 482:	61 95       	neg	r22
 484:	7f 4f       	sbci	r23, 0xFF	; 255

00000486 <__divmodhi4_exit>:
 486:	08 95       	ret

00000488 <__udivmodsi4>:
 488:	a1 e2       	ldi	r26, 0x21	; 33
 48a:	1a 2e       	mov	r1, r26
 48c:	aa 1b       	sub	r26, r26
 48e:	bb 1b       	sub	r27, r27
 490:	fd 01       	movw	r30, r26
 492:	0d c0       	rjmp	.+26     	; 0x4ae <__udivmodsi4_ep>

00000494 <__udivmodsi4_loop>:
 494:	aa 1f       	adc	r26, r26
 496:	bb 1f       	adc	r27, r27
 498:	ee 1f       	adc	r30, r30
 49a:	ff 1f       	adc	r31, r31
 49c:	a2 17       	cp	r26, r18
 49e:	b3 07       	cpc	r27, r19
 4a0:	e4 07       	cpc	r30, r20
 4a2:	f5 07       	cpc	r31, r21
 4a4:	20 f0       	brcs	.+8      	; 0x4ae <__udivmodsi4_ep>
 4a6:	a2 1b       	sub	r26, r18
 4a8:	b3 0b       	sbc	r27, r19
 4aa:	e4 0b       	sbc	r30, r20
 4ac:	f5 0b       	sbc	r31, r21

000004ae <__udivmodsi4_ep>:
 4ae:	66 1f       	adc	r22, r22
 4b0:	77 1f       	adc	r23, r23
 4b2:	88 1f       	adc	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	1a 94       	dec	r1
 4b8:	69 f7       	brne	.-38     	; 0x494 <__udivmodsi4_loop>
 4ba:	60 95       	com	r22
 4bc:	70 95       	com	r23
 4be:	80 95       	com	r24
 4c0:	90 95       	com	r25
 4c2:	9b 01       	movw	r18, r22
 4c4:	ac 01       	movw	r20, r24
 4c6:	bd 01       	movw	r22, r26
 4c8:	cf 01       	movw	r24, r30
 4ca:	08 95       	ret

000004cc <__umulhisi3>:
 4cc:	a2 9f       	mul	r26, r18
 4ce:	b0 01       	movw	r22, r0
 4d0:	b3 9f       	mul	r27, r19
 4d2:	c0 01       	movw	r24, r0
 4d4:	a3 9f       	mul	r26, r19
 4d6:	70 0d       	add	r23, r0
 4d8:	81 1d       	adc	r24, r1
 4da:	11 24       	eor	r1, r1
 4dc:	91 1d       	adc	r25, r1
 4de:	b2 9f       	mul	r27, r18
 4e0:	70 0d       	add	r23, r0
 4e2:	81 1d       	adc	r24, r1
 4e4:	11 24       	eor	r1, r1
 4e6:	91 1d       	adc	r25, r1
 4e8:	08 95       	ret

000004ea <__udivmodhi4>:
 4ea:	aa 1b       	sub	r26, r26
 4ec:	bb 1b       	sub	r27, r27
 4ee:	51 e1       	ldi	r21, 0x11	; 17
 4f0:	07 c0       	rjmp	.+14     	; 0x500 <__udivmodhi4_ep>

000004f2 <__udivmodhi4_loop>:
 4f2:	aa 1f       	adc	r26, r26
 4f4:	bb 1f       	adc	r27, r27
 4f6:	a6 17       	cp	r26, r22
 4f8:	b7 07       	cpc	r27, r23
 4fa:	10 f0       	brcs	.+4      	; 0x500 <__udivmodhi4_ep>
 4fc:	a6 1b       	sub	r26, r22
 4fe:	b7 0b       	sbc	r27, r23

00000500 <__udivmodhi4_ep>:
 500:	88 1f       	adc	r24, r24
 502:	99 1f       	adc	r25, r25
 504:	5a 95       	dec	r21
 506:	a9 f7       	brne	.-22     	; 0x4f2 <__udivmodhi4_loop>
 508:	80 95       	com	r24
 50a:	90 95       	com	r25
 50c:	bc 01       	movw	r22, r24
 50e:	cd 01       	movw	r24, r26
 510:	08 95       	ret

00000512 <_exit>:
 512:	f8 94       	cli

00000514 <__stop_program>:
 514:	ff cf       	rjmp	.-2      	; 0x514 <__stop_program>
